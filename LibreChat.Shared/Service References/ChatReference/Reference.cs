//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibreChat.Shared.ChatReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatReference.IChatService", CallbackContract=typeof(LibreChat.Shared.ChatReference.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        string Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Logout")]
        void Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CreateLobby")]
        void CreateLobby(string token, string lobbyName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CreateLobby")]
        System.Threading.Tasks.Task CreateLobbyAsync(string token, string lobbyName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RemoveLobby")]
        void RemoveLobby(string token, string lobbyName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RemoveLobby")]
        System.Threading.Tasks.Task RemoveLobbyAsync(string token, string lobbyName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/JoinLobby")]
        void JoinLobby(string token, string lobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/JoinLobby")]
        System.Threading.Tasks.Task JoinLobbyAsync(string token, string lobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/LeaveLobby")]
        void LeaveLobby(string token, string lobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/LeaveLobby")]
        System.Threading.Tasks.Task LeaveLobbyAsync(string token, string lobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Say")]
        void Say(string token, string lobby, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Say")]
        System.Threading.Tasks.Task SayAsync(string token, string lobby, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Whisper")]
        void Whisper(string token, string receiver, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Whisper")]
        System.Threading.Tasks.Task WhisperAsync(string token, string receiver, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RefreshLobbyList")]
        void RefreshLobbyList(string[] lobbies);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RefreshLobbyMembers")]
        void RefreshLobbyMembers(string lobby, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveMessage")]
        void ReceiveMessage(string lobby, string sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveWhisper")]
        void ReceiveWhisper(string sender, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : LibreChat.Shared.ChatReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<LibreChat.Shared.ChatReference.IChatService>, LibreChat.Shared.ChatReference.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string Login(string login1) {
            return base.Channel.Login(login1);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string login) {
            return base.Channel.LoginAsync(login);
        }
        
        public void Logout(string token) {
            base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public void CreateLobby(string token, string lobbyName) {
            base.Channel.CreateLobby(token, lobbyName);
        }
        
        public System.Threading.Tasks.Task CreateLobbyAsync(string token, string lobbyName) {
            return base.Channel.CreateLobbyAsync(token, lobbyName);
        }
        
        public void RemoveLobby(string token, string lobbyName) {
            base.Channel.RemoveLobby(token, lobbyName);
        }
        
        public System.Threading.Tasks.Task RemoveLobbyAsync(string token, string lobbyName) {
            return base.Channel.RemoveLobbyAsync(token, lobbyName);
        }
        
        public void JoinLobby(string token, string lobby) {
            base.Channel.JoinLobby(token, lobby);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsync(string token, string lobby) {
            return base.Channel.JoinLobbyAsync(token, lobby);
        }
        
        public void LeaveLobby(string token, string lobby) {
            base.Channel.LeaveLobby(token, lobby);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(string token, string lobby) {
            return base.Channel.LeaveLobbyAsync(token, lobby);
        }
        
        public void Say(string token, string lobby, string message) {
            base.Channel.Say(token, lobby, message);
        }
        
        public System.Threading.Tasks.Task SayAsync(string token, string lobby, string message) {
            return base.Channel.SayAsync(token, lobby, message);
        }
        
        public void Whisper(string token, string receiver, string message) {
            base.Channel.Whisper(token, receiver, message);
        }
        
        public System.Threading.Tasks.Task WhisperAsync(string token, string receiver, string message) {
            return base.Channel.WhisperAsync(token, receiver, message);
        }
    }
}
